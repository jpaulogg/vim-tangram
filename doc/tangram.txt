*tangram.txt* snippets plugin as minimal as a tangram puzzle!

                 ________
                │╲      ╱│
                │ ╲    ╱ │
                │  ╲  ╱╲ │
                │   ╲╱  ╲│
                │   ╱╲  ╱│
                │  ╱  ╲╱ │
                │ ╱‾‾‾╱  │
                │╱   ╱   │
                 ‾‾‾‾‾‾‾‾‾

1. Inserting Snippets ·············· |tangram-insert|
2. Adding Snippets ················· |tangram-add-snippet|
3. Options ························· |tangram-options|
4. Mappings ························ |tangram-mappings|

==============================================================================
INSERTING SNIPPETS                                              *tangram-insert*

In insert  mode,  <C-s>i  looks  in  |tangram-directories|  for  a  file  that
matches the keyword in front of the cursor. It looks first in the file  type
subdirectory (if there is one) and than searches in the main directory.

In  different types of files we can access snippets with different keywords.
Let's say that |tangram-directories| have the following files:

{subdir}file name                 keyword by file type ~
                             -               r           python
"foobar.snip"             foobar             -              -
"r/foobar.snip"           r/foobar         foobar        r/foobar
"python/foobar.snip"      python/foobar    python/foobar foobar

NOTE: It is recommended  to  rename the  file  in  the  main  directory to
"Foobar.snip". That way, keyword for that file in all types of files would
be "Foobar".
                                           *tangram-complete* *TangramCoplete()*
If the 'completefunc' option is empty, it will be set to `TangramComplete()`.
See |i_CTRL-X_CTRL-U|.

In insert mode, <C-x><C-u> completes keyword snippets in front of the cursor.
This works similarly to file  name  completion,  so  you  can  also  complete
subdirectories names. See |i_CTRL-X_CTRL-F|.

Following the last example, we have:
{subdir}file name                typing before completion ~
                             -               r             python
"Foobar.snip"             Foo...           Foo...        Foo...
"r/foobar.snip"           r/foo...         foo...        r/foo...
"python/foobar.snip"      python/foo...    python/foo... foo...

Related: |tangram-placeholders|.

==============================================================================
ADDING SNIPPETS                                            *tangram-add-snippet*

Snippets files must be placed in the |tangram-directories| and must  end  with
'.snip' extension,  for  example  "~/.config/nvim/snippets/Foo.snip".  It is
recommended that the first letter of main directory snippets be  capitalized.
You can also place your snippets in subdirectories within the main directory,
for example "~/.config/nvim/snippets/python/foo.snip".
                                                          *tangram-placeholders*
Placeholders  marks  parts of the snippet where  you  may want to insert some
new text, confirm  surrounded text or  trigger vim expression. See |s_CTRL-S_D|
and |s_CTRL-S_E|.

`<{ }>, <{default value}>, <{strftime('%c')}>`

A more realistic example from "~/.config/nvim/snippets/r/packages.snip":

`packages <- c('i', '<{stringr}>', '<{forcats}>'<{ }>`
              `<{'<{dplyr}>', '<{ggplot2}>', '<{ }>')}>`

`for (p in packages) {`
	`if (!require(p, character.only = TRUE, quietly = TRUE)) {`
		`install.packages(p)`
		`library(p, character.only = TRUE)`
	`}`
`}`

Note that you can create nested placeholders. See |s_CTRL-S_n| |s_CTRL-S_p| for
jumping through placeholders levels.

Use |tangram-delimiters| to add placeholders  to  the snippet text. In  visual
and select modes, <C-s>a adds delimiters to selected area and <C-s>d deletes
them.

You can jump through placeholders with <C-s>n (next) and <C-s>p (previous) in
insert and select modes.

==============================================================================
OPTIONS                                                        *tangram-options*

You can define the path to snippets directory with the |g:tangram_dir| variable
and  the placeholder delimiters with  the |g:tangram_open|  and |g:tangram_close|
variables. Example:

`let g:tangram_dir = '/home/user-name/.local/share/vim/snippets/'`
`let g:tangram_open  = '<-:'`
`let g:tangram_close = ':->'`
                                             *tangram-directories* *g:tangram_dir*
You must create a main directory to keep your snippets files. You can  also
create subdirectories by file type. By default snippets directory is set to
|$HOME|/.config/nvim/snippets/ in  neovim  and  |$HOME|/.vim/snippets/  in  vim. 
To create the defaults directories from the shell:

`mkdir ~/.config/nvim/snippets/` in neovim
`mkdir ~/.vim/snippets/`         in vim

                             *tangram-delimiters* *g:tangram_open* *g:tangram_close*
Defaults: '<{', '{>'

The start and end delimiters of the placeholder string  to  use.  The  opening
delimiter must begin with a single '<' and the closing delimiter must end with
a single '>', so that commands like |a<| work properly. See |tangram-placeholders|.

==============================================================================
MAPPINGS                                                      *tangram-mappings*

                                                         *i_CTRL-S_I*
CTRL-S i      Looks in |tangram-directories| for a file that matches the keyword
              in front of the cursor and insert it in the current line.

                                                         *i_CTRL-S_N*
CTRL-S n      Visually selects next placeholder and starts |Select-mode|.
              If it is a nested placeholder, selects the outer level.

                                                         *i_CTRL-S_P*
CTRL-S p      Visually selects  previous placeholder and starts |Select-mode|.
              If the current selected area is a nested placeholder, selects
              the inner level, otherwise selects the outer level.

                                                         *s_CTRL-N* *s_CTRL-S_n*
CTRL-N   or
CTRL-S n      For faster movement in select mode, hold <CTRL> and then
              press "n" (next). CTRL-S n still works.
                                                         *s_CTRL-P* *s_CTRL-S_p*
CTRL-N   or
CTRL-S p      For faster movement in select mode, hold <CTRL> and then
              press "p" (previous). CTRL-S p still works.

                                                         *v_CTRL-S_A*
CTRL-S a      Adds placeholders delimiters to selected area.
              See |g:tangram_open| and |g:tangram_close|.
                                                         *v_CTRL-S_D*
CTRL-S d      Deletes placeholders delimiters from selected area and keeps
              internal text.
                                                         *v_CTRL-S_E*
CTRL-S e      Expands expressions within selecteed placeholder.
              See |tangram-placeholders|.

vim: set et ft=help :
